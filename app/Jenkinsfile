pipeline {
    agent any

    parameters {
        string(name: 'GIT_BRANCH_OR_TAG', defaultValue: 'main', description: 'Inserisci il branch o il tag specifico da costruire (es: master, develop, v1.0.0)')
    }

    environment {
        LOCAL_REGISTRY_CREDENTIALS = credentials('dockerHubCredentials')
        LOCAL_REGISTRY = 'private.registry.org/flask-app-example'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    def scmVars = checkout([
                        $class: 'GitSCM', 
                        branches: [[name: "${params.GIT_BRANCH_OR_TAG}"]], 
                        doGenerateSubmoduleConfigurations: false, 
                        extensions: [], 
                        submoduleCfg: [], 
                        userRemoteConfigs: scm.userRemoteConfigs
                    ])
                    GIT_COMMIT = scmVars.GIT_COMMIT
                    GIT_BRANCH = scmVars.GIT_BRANCH ?: params.GIT_BRANCH_OR_TAG
                    if (GIT_BRANCH == 'master') {
                        IMAGE_TAG = 'latest'
                    } else if (GIT_BRANCH == 'develop') {
                        IMAGE_TAG = "develop-${GIT_COMMIT}"
                    } else if (scmVars.GIT_TAG != null || params.GIT_BRANCH_OR_TAG.startsWith('v')) {
                        IMAGE_TAG = params.GIT_BRANCH_OR_TAG
                    } else {
                        IMAGE_TAG = "branch-${GIT_BRANCH}-${GIT_COMMIT}"
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                container('docker'){
                    sh 'docker build -t "${LOCAL_REGISTRY}:${IMAGE_TAG}" app'
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                container('docker') {
                    sh 'USERNAME=$(awk -F: '{print $1}' $LOCAL_REGISTRY_CREDENTIALS)'
                    sh 'PASSWORD=$(awk -F: '{print $2}' $LOCAL_REGISTRY_CREDENTIALS)'
                    sh 'docker login $REGISTRY_URL --username $USERNAME --password $PASSWORD)'
                    sh 'docker tag $LOCAL_REGISTRY:$IMAGE_TAG $REGISTRY_URL/$LOCAL_REGISTRY:$IMAGE_TAG'
                    sh 'docker push $REGISTRY_URL/$LOCAL_REGISTRY:$IMAGE_TAG'
                    sh 'docker logout $REGISTRY_URL'
                }
            }
        }
    }
}
